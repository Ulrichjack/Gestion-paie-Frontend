<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Walter Bishop Tech Lab</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, #0f0f23, #1a1a3a);
            color: #00ff00;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(0, 255, 0, 0.1);
            padding: 20px;
            border-radius: 10px;
            border: 2px solid #00ff00;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 0 0 10px #00ff00;
        }

        .subtitle {
            color: #ffff00;
            font-size: 1.2em;
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 30px;
            border: 1px solid #00ff00;
        }

        .status-item {
            text-align: center;
        }

        .status-label {
            color: #ffff00;
            font-size: 0.9em;
        }

        .status-value {
            color: #00ff00;
            font-size: 1.2em;
            font-weight: bold;
        }

        .domains-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .domain-card {
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #00ff00;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .domain-card:hover {
            box-shadow: 0 0 20px #00ff00;
            transform: translateY(-5px);
        }

        .domain-card.active {
            border-color: #ffff00;
            box-shadow: 0 0 15px #ffff00;
        }

        .domain-title {
            color: #ffff00;
            font-size: 1.3em;
            margin-bottom: 10px;
            text-align: center;
        }

        .domain-progress {
            background: #333;
            height: 8px;
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #00ff00, #ffff00);
            transition: width 0.3s ease;
        }

        .domain-desc {
            font-size: 0.9em;
            color: #ccc;
            margin-bottom: 15px;
        }

        .challenge-section {
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid #ffff00;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .challenge-title {
            color: #ffff00;
            font-size: 1.5em;
            margin-bottom: 15px;
            text-align: center;
        }

        .challenge-content {
            background: rgba(0, 255, 0, 0.1);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #00ff00;
        }

        .time-selector {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
        }

        .time-btn {
            background: rgba(0, 0, 0, 0.8);
            color: #00ff00;
            border: 1px solid #00ff00;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .time-btn:hover, .time-btn.active {
            background: #00ff00;
            color: #000;
        }

        .study-timer {
            text-align: center;
            font-size: 2em;
            margin: 20px 0;
            color: #ffff00;
        }

        .english-integration {
            background: rgba(255, 255, 0, 0.1);
            border: 2px solid #ffff00;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
        }

        .english-tip {
            color: #ffff00;
            font-style: italic;
            margin-bottom: 10px;
        }

        .experiment-log {
            background: rgba(0, 0, 0, 0.9);
            border: 1px solid #00ff00;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
        }

        .log-entry {
            color: #ccc;
            margin-bottom: 5px;
            font-size: 0.9em;
        }

        .btn {
            background: rgba(0, 255, 0, 0.2);
            color: #00ff00;
            border: 1px solid #00ff00;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .btn:hover {
            background: #00ff00;
            color: #000;
        }

        .hidden {
            display: none;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .pulsing {
            animation: pulse 2s infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ WALTER BISHOP TECH LAB üß™</h1>
            <div class="subtitle">"The Universe is Big, It's Vast and Complicated and Ridiculous"</div>
            <div class="subtitle">Ma√Ætrise totale : Arduino ‚Ä¢ Cyber Security ‚Ä¢ Java/Spring ‚Ä¢ Web Dev ‚Ä¢ English</div>
        </div>

        <div class="status-bar">
            <div class="status-item">
                <div class="status-label">Jours jusqu'au travail</div>
                <div class="status-value" id="countdown">Calcul...</div>
            </div>
            <div class="status-item">
                <div class="status-label">Niveau Global</div>
                <div class="status-value" id="global-level">Apprenti</div>
            </div>
            <div class="status-item">
                <div class="status-label">Exp√©riences compl√©t√©es</div>
                <div class="status-value" id="experiments-done">0</div>
            </div>
            <div class="status-item">
                <div class="status-label">Temps d'√©tude aujourd'hui</div>
                <div class="status-value" id="study-time">0h</div>
            </div>
        </div>

        <div class="time-selector">
            <button class="time-btn" onclick="setStudyMode('intensive')">Mode Intensif (Avant travail)</button>
            <button class="time-btn active" onclick="setStudyMode('work')">Mode Travail (Moments calmes)</button>
            <button class="time-btn" onclick="setStudyMode('quick')">Mode Express (5-10min)</button>
        </div>

        <div class="domains-grid">
            <div class="domain-card" onclick="selectDomain('arduino')">
                <div class="domain-title">üîß Arduino & Syst√®mes Embarqu√©s</div>
                <div class="domain-progress">
                    <div class="progress-bar" style="width: 25%"></div>
                </div>
                <div class="domain-desc">Cr√©ation de projets hardware/software</div>
                <div class="english-integration">
                    <div class="english-tip">üìö Anglais int√©gr√© : Datasheets, forums Arduino.cc</div>
                </div>
            </div>

            <div class="domain-card" onclick="selectDomain('cybersec')">
                <div class="domain-title">üõ°Ô∏è CyberSecurity</div>
                <div class="domain-progress">
                    <div class="progress-bar" style="width: 15%"></div>
                </div>
                <div class="domain-desc">Ethical hacking, cryptographie, s√©curit√© r√©seau</div>
                <div class="english-integration">
                    <div class="english-tip">üìö Anglais int√©gr√© : CVE database, security blogs</div>
                </div>
            </div>

            <div class="domain-card" onclick="selectDomain('java')">
                <div class="domain-title">‚òï Java & Spring Boot</div>
                <div class="domain-progress">
                    <div class="progress-bar" style="width: 40%"></div>
                </div>
                <div class="domain-desc">D√©veloppement backend, APIs REST</div>
                <div class="english-integration">
                    <div class="english-tip">üìö Anglais int√©gr√© : Documentation Oracle, Stack Overflow</div>
                </div>
            </div>

            <div class="domain-card" onclick="selectDomain('webdev')">
                <div class="domain-title">üåê Web Development</div>
                <div class="domain-progress">
                    <div class="progress-bar" style="width: 30%"></div>
                </div>
                <div class="domain-desc">Bootstrap, HTML/CSS/JS, Frontend moderne</div>
                <div class="english-integration">
                    <div class="english-tip">üìö Anglais int√©gr√© : MDN docs, tutorials</div>
                </div>
            </div>

            <div class="domain-card" onclick="selectDomain('english')">
                <div class="domain-title">üó£Ô∏è English Mastery</div>
                <div class="domain-progress">
                    <div class="progress-bar" style="width: 20%"></div>
                </div>
                <div class="domain-desc">Lecture technique, compr√©hension, expression</div>
                <div class="english-integration">
                    <div class="english-tip">üéØ Focus : Tech vocabulary, documentation reading</div>
                </div>
            </div>
        </div>

        <div class="challenge-section">
            <div class="challenge-title">üî¨ Exp√©rience du Jour</div>
            <div class="study-timer" id="timer">00:00</div>
            <div class="challenge-content" id="challenge-content">
                <p>S√©lectionnez un domaine pour commencer votre exp√©rience quotidienne !</p>
            </div>
            <div style="text-align: center; margin-top: 15px;">
                <button class="btn" onclick="startExperiment()">D√©marrer l'Exp√©rience</button>
                <button class="btn" onclick="completeExperiment()">Terminer</button>
                <button class="btn" onclick="generateNewChallenge()">Nouvelle Exp√©rience</button>
            </div>
        </div>

        <div class="experiment-log">
            <div style="color: #ffff00; margin-bottom: 10px;">üìù Journal de Laboratoire</div>
            <div id="log-entries">
                <div class="log-entry">üß™ Laboratoire initialis√© - Pr√™t pour les exp√©riences</div>
            </div>
        </div>
    </div>

    <script>
        let currentDomain = null;
        let studyMode = 'work';
        let timerInterval = null;
        let currentTime = 0;
        let experimentsCompleted = 0;

        const challenges = {
            arduino: {
                intensive: [
                    "Build a temperature monitoring system with LCD display",
                    "Create a motion-activated LED security system",
                    "Program a servo motor control with button inputs",
                    "Design a simple home automation prototype"
                ],
                work: [
                    "Read and understand one Arduino sensor datasheet (in English)",
                    "Write pseudocode for a traffic light controller",
                    "Study PWM concepts and applications",
                    "Research one new Arduino library and its functions"
                ],
                quick: [
                    "Explain the difference between digitalWrite and analogWrite",
                    "List 5 common Arduino sensors and their uses",
                    "Write a simple blink program from memory",
                    "Identify Arduino pin types and their functions"
                ]
            },
            cybersec: {
                intensive: [
                    "Set up a virtual pentesting lab with Kali Linux",
                    "Practice SQL injection on a test database",
                    "Learn about network scanning with Nmap",
                    "Study cryptographic algorithms implementation"
                ],
                work: [
                    "Read about the latest CVE vulnerabilities (in English)",
                    "Study one encryption algorithm in detail",
                    "Research common web application vulnerabilities",
                    "Learn about network security protocols"
                ],
                quick: [
                    "Explain the difference between symmetric and asymmetric encryption",
                    "List the OWASP Top 10 vulnerabilities",
                    "Define what is a firewall and how it works",
                    "Describe the concept of social engineering"
                ]
            },
            java: {
                intensive: [
                    "Build a REST API with Spring Boot and database",
                    "Create a user authentication system",
                    "Implement exception handling in a complex application",
                    "Design a microservices architecture"
                ],
                work: [
                    "Read Spring Boot documentation (in English)",
                    "Study design patterns: Singleton, Factory, Observer",
                    "Learn about JVM memory management",
                    "Research Spring Security features"
                ],
                quick: [
                    "Explain the difference between abstract class and interface",
                    "Write a simple ArrayList manipulation example",
                    "Describe the concept of dependency injection",
                    "List the main Spring Boot annotations"
                ]
            },
            webdev: {
                intensive: [
                    "Create a responsive portfolio website with Bootstrap",
                    "Build a dynamic web app with JavaScript and APIs",
                    "Implement CSS animations and transitions",
                    "Design a mobile-first responsive layout"
                ],
                work: [
                    "Study CSS Grid vs Flexbox differences",
                    "Read about modern JavaScript ES6+ features",
                    "Learn about web accessibility guidelines",
                    "Research Progressive Web App concepts"
                ],
                quick: [
                    "Write a CSS media query for mobile devices",
                    "Explain the box model in CSS",
                    "Create a simple JavaScript event handler",
                    "List 5 new HTML5 semantic elements"
                ]
            },
            english: {
                intensive: [
                    "Read a complete technical article and summarize it",
                    "Watch a programming tutorial video without subtitles",
                    "Write a technical blog post about your current project",
                    "Practice explaining code concepts out loud in English"
                ],
                work: [
                    "Learn 10 new technical terms with definitions",
                    "Read Stack Overflow questions and answers",
                    "Study technical documentation (Arduino/Java/Spring)",
                    "Practice pronunciation of programming terms"
                ],
                quick: [
                    "Translate 5 programming concepts to English",
                    "Read one paragraph of technical documentation",
                    "Practice saying common programming phrases",
                    "Learn abbreviations: API, HTTP, CSS, HTML, SQL"
                ]
            }
        };

        function updateCountdown() {
            const targetDate = new Date('2025-07-19');
            const now = new Date();
            const difference = targetDate - now;

            if (difference > 0) {
                const days = Math.floor(difference / (1000 * 60 * 60 * 24));
                document.getElementById('countdown').textContent = `${days} jours`;
            } else {
                document.getElementById('countdown').textContent = 'Travail commenc√©!';
            }
        }

        function setStudyMode(mode) {
            studyMode = mode;
            document.querySelectorAll('.time-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');

            if (currentDomain) {
                generateNewChallenge();
            }
        }

        function selectDomain(domain) {
            currentDomain = domain;
            document.querySelectorAll('.domain-card').forEach(card => card.classList.remove('active'));
            event.target.closest('.domain-card').classList.add('active');

            generateNewChallenge();
        }

        function generateNewChallenge() {
            if (!currentDomain) return;

            const domainChallenges = challenges[currentDomain][studyMode];
            const randomChallenge = domainChallenges[Math.floor(Math.random() * domainChallenges.length)];

            const challengeContent = document.getElementById('challenge-content');
            challengeContent.innerHTML = `
                <h3>üéØ Domaine: ${currentDomain.toUpperCase()}</h3>
                <h4>‚è±Ô∏è Mode: ${studyMode}</h4>
                <p><strong>D√©fi:</strong> ${randomChallenge}</p>
                <div class="english-integration">
                    <div class="english-tip">üí° Astuce Walter: Recherche tout en anglais pour doubler ton apprentissage!</div>
                </div>
            `;

            addLogEntry(`üî¨ Nouvelle exp√©rience g√©n√©r√©e: ${currentDomain} (${studyMode})`);
        }

        function startExperiment() {
            if (timerInterval) return;

            timerInterval = setInterval(() => {
                currentTime++;
                updateTimer();
            }, 1000);

            addLogEntry(`‚ñ∂Ô∏è Exp√©rience d√©marr√©e: ${currentDomain || 'G√©n√©ral'}`);
        }

        function completeExperiment() {
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }

            experimentsCompleted++;
            document.getElementById('experiments-done').textContent = experimentsCompleted;

            // Update progress bar
            if (currentDomain) {
                const card = document.querySelector(`[onclick="selectDomain('${currentDomain}')"]`);
                const progressBar = card.querySelector('.progress-bar');
                const currentWidth = parseInt(progressBar.style.width) || 0;
                progressBar.style.width = Math.min(100, currentWidth + 5) + '%';
            }

            addLogEntry(`‚úÖ Exp√©rience termin√©e! Temps: ${formatTime(currentTime)}`);
            currentTime = 0;
            updateTimer();

            // Auto-generate new challenge
            setTimeout(() => {
                generateNewChallenge();
            }, 2000);
        }

        function updateTimer() {
            document.getElementById('timer').textContent = formatTime(currentTime);

            // Update daily study time
            const hours = Math.floor(currentTime / 3600);
            const minutes = Math.floor((currentTime % 3600) / 60);
            document.getElementById('study-time').textContent = `${hours}h${minutes.toString().padStart(2, '0')}`;
        }

        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        function addLogEntry(message) {
            const logEntries = document.getElementById('log-entries');
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = `${new Date().toLocaleTimeString()} - ${message}`;
            logEntries.appendChild(entry);
            logEntries.scrollTop = logEntries.scrollHeight;
        }

        // Initialize
        updateCountdown();
        setInterval(updateCountdown, 60000); // Update every minute

        // Set initial challenge
        generateNewChallenge();

        // Add some inspiring Walter Bishop quotes
        const quotes = [
            "The brain is the most complex organism in the known universe",
            "Science is about taking risks, about testing limits",
            "Sometimes the most extraordinary things hide in the most mundane",
            "The universe is big, vast, complicated and ridiculous"
        ];

        setInterval(() => {
            const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
            addLogEntry(`üí≠ Walter: "${randomQuote}"`);
        }, 300000); // Every 5 minutes
    </script>
</body>
</html>
